{"version":2,"kind":"Notebook","sha256":"a15aef6a3e3c2f37fdd1d6115d539fc0908b75e75c6d2cbc6d960f00aeb01ea7","slug":"light-curve-classifier","location":"/light_curves/light_curve_classifier.md","dependencies":[],"frontmatter":{"title":"Light Curve Classifier","kernelspec":{"name":"python3","display_name":"py-light_curve_classifier","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.0"}},"content_includes_title":false,"authors":[{"id":"Fornax developers and scientists","name":"Fornax developers and scientists"}],"github":"https://github.com/nasa-fornax/fornax-demo-notebooks","subject":"Fornax Demo Notebooks","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/nasa-fornax/fornax-demo-notebooks/blob/main/light_curves/light_curve_classifier.md","exports":[{"format":"md","filename":"light_curve_classifier.md","url":"/fornax-demo-notebooks/build/light_curve_classifi-2648d07fb6f97315f8d2525b83a71df7.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"I6kb3Ew451"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"Rg1jcHpeCy"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"By the end of this tutorial, you will be able to:","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"lgI4pSy17U"}],"key":"GhdQ4gWpOT"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":19,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"prepare data for ML algorithms by cleaning and filtering the dataset","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"ndZjaDCU4f"}],"key":"EFHHNRyWTn"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"work with Pandas dataframes as a way of storing and manipulating time domain datasets","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"eOfY2HWtTK"}],"key":"ARDniMvikZ"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"use ","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"WZBQ5P0XY8"},{"type":"link","url":"https://www.sktime.net/en/stable/index.html","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"sktime","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"L1pzXymAAX"}],"urlSource":"https://www.sktime.net/en/stable/index.html","key":"WN1cWZmRVI"},{"type":"text","value":" algorithms to train a classifier and calculate metrics of accuracy","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"JuCqZeQrCS"}],"key":"KnIEoISxjD"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"use the trained classifier to predict labels on an unlabelled dataset","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"WFF1WzVto2"}],"key":"eoDM9gaSoZ"}],"key":"ATGIM9terM"},{"type":"heading","depth":2,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"fvfwyXpjJS"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"DlFJmP7jz0"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"The science goal of this notebook is to find a classifier that can accurately discern changing look active galactic nuclei (CLAGN) from a broad sample of all Sloan Digital Sky Survey (SDSS) identified Quasars (QSOs) based solely on archival photometry in the form of multiwavelength light curves.","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"tGYiucmIEr"}],"key":"T5mJ3Qwse7"},{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"CLAGN are astrophysically interesting objects because they appear to change state.  CLAGN are characterized by the appearance or disappearance of broad emission lines on timescales of order months.  Astronomers would like to understand the physical mechanism behind this apparent change of state.  However, only a few hundered CLAGN are known, and finding CLAGN is observationally expensive, traditionally requiring multiple epochs of spectroscopy.  Being able to identify CLAGN in existing, archival, large, photometric samples would allow us to identify a statisitcally significant sample from which we could better understand the underlying physics.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"Y8ocTpUEZv"}],"key":"mucplD8slc"},{"type":"paragraph","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"This notebook walks through an exercise in using multiwavelength photometry(no spectroscopy) to learn if we can identify CLAGN based on their light curves alone.  If we are able to find a classifier that can differentiate CLAGN from SDSS QSOs, we would then be able to run the entire sample of SDSS QSOs (~500,000) to find additional CLAGN candidates for follow-up verification.","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"WFxfa3k1hf"}],"key":"IUmaMD0OMN"},{"type":"paragraph","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Input to this notebook is output of a previous demo notebook which generates multiwavelength light curves from archival data.  This notebook starts with light curves, does data prep, and runs the light curves through multiple ML classification algorithms.  There are many ML algorthms to choose from; We choose to use sktime algorithms for time domain classification beacuse it is a library of many algorithms specifically tailored to time series datasets.  It is based on the ","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"gDn8g3YDBE"},{"type":"link","url":"https://scikit-learn.org/stable/index.html","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"scikit-learn","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"ZzNnrS02Yp"}],"urlSource":"https://scikit-learn.org/stable/index.html","key":"BpckVPMQnP"},{"type":"text","value":" library so syntax is familiar to many users.","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"PNj6rIe0Wl"}],"key":"InheNvFYxs"},{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"The challenges of this time-domain dataset for ML work are:","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"HR53rraoC8"}],"key":"klxZxgzNaH"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":35,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Multi-variate = There are multiple bands of observations per target (13+)","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"vjluS3yW9L"}],"key":"iBn2S1HyPQ"},{"type":"listItem","spread":true,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Unequal length = Each band has a light curve with different sampling than other bands","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"hPlaNzMjgd"}],"key":"lrOpLjEudu"},{"type":"listItem","spread":true,"position":{"start":{"line":37,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Missing data = Not each object has all observations in all bands","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"OvDVNCpVsF"}],"key":"uISdzv2rQS"}],"key":"G96PXK4Sph"},{"type":"heading","depth":3,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Input","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"XLldOEu6Wf"}],"identifier":"input","label":"Input","html_id":"input","implicit":true,"key":"mUlshvh7Z2"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"Light curve parquet file of multiwavelength light curves from the light_curve_collector.md demo notebook in this same repo.  The format of the light curves is a Pandas multiindex data frame.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"goxHQDiIlz"}],"key":"YAlvHh3jeK"},{"type":"paragraph","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"We choose to use a Pandas multiindex dataframe to store and work with the data because it fulfills these requirements:","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"uWbvpxGeBx"}],"key":"FXu17FDSSt"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":44,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"It can handle the above challenges of a dataset = multi-variate, unqueal length with missing data.","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"dqCsWZ5V1C"}],"key":"fF4V8vaLaO"},{"type":"listItem","spread":true,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"Multiple targets (multiple rows)","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"AZDcSsEVTc"}],"key":"xNlYYEA5Ei"},{"type":"listItem","spread":true,"position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"children":[{"type":"text","value":"Pandas has some built in understanding of time units","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"wwAGkhJfAq"}],"key":"YUaSsVb98E"},{"type":"listItem","spread":true,"position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"Can be scaled up to big data numbers of rows (altough we don’t push to out of memory structures in this use case)","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"ymcGlhbStR"}],"key":"cmE7UUMdw4"},{"type":"listItem","spread":true,"position":{"start":{"line":48,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"text","value":"Pandas is user friendly with a lot of existing functionality","position":{"start":{"line":48,"column":1},"end":{"line":48,"column":1}},"key":"zRdxnQr44a"}],"key":"xnIIKaRw80"}],"key":"iKJ56R8csa"},{"type":"paragraph","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"text","value":"A useful reference for what sktime expects as input to its ML algorithms: ","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"M1GKnUP3aV"},{"type":"link","url":"https://github.com/sktime/sktime/blob/main/examples/AA_datatypes_and_datasets.ipynb","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"text","value":"examples​/AA​_datatypes​_and​_datasets​.ipynb","key":"O3LsFIG5ZX"}],"urlSource":"https://github.com/sktime/sktime/blob/main/examples/AA_datatypes_and_datasets.ipynb","data":{"kind":"file","org":"sktime","repo":"sktime","reference":"main","file":"examples/AA_datatypes_and_datasets.ipynb","raw":"https://raw.githubusercontent.com/sktime/sktime/main/examples/AA_datatypes_and_datasets.ipynb"},"internal":false,"protocol":"github","key":"QDu2rKYAPH"}],"key":"MA1LzbVk7i"},{"type":"heading","depth":3,"position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"Output","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"e2jf8mGobw"}],"identifier":"output","label":"Output","html_id":"output","implicit":true,"key":"ovWI1EFscp"},{"type":"paragraph","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"children":[{"type":"text","value":"Trained classifiers as well as estimates of their accuracy and plots of confusion matrices","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"RlJUApNocA"}],"key":"rZ4WzH7P9i"},{"type":"heading","depth":3,"position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"children":[{"type":"text","value":"Runtime","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"tu2PlEJ9AX"}],"identifier":"runtime","label":"Runtime","html_id":"runtime","implicit":true,"key":"pglc6d2Mad"},{"type":"paragraph","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"As of 2024 August, this notebook takes ~170s to run to completion on Fornax using the ‘Astrophysics Default Image’ and the ‘Large’ server with 16GB RAM/ 4CPU.","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"JtB9A133sz"}],"key":"usJtiO3YBW"},{"type":"heading","depth":2,"position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"B4H0kiLERU"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"Bl3b5c4Fdq"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":62,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"children":[{"type":"inlineCode","value":"pandas","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"K9VtAYnniz"},{"type":"text","value":" to work with light curve data structure","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"HRJv33wlSD"}],"key":"Bv3wUDREM6"},{"type":"listItem","spread":true,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"inlineCode","value":"numpy","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"ncgKtQtNPU"},{"type":"text","value":" for numerical calculations","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"pLKI6VivJ5"}],"key":"vs6ybzpIRf"},{"type":"listItem","spread":true,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"TvJrvqw6rW"},{"type":"text","value":" for plotting","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"yq3bHofyXt"}],"key":"uFCkkr6e44"},{"type":"listItem","spread":true,"position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"inlineCode","value":"sys","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"cYTsx2ifom"},{"type":"text","value":" for paths","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"tPASY5b4YF"}],"key":"zb3muKOlCD"},{"type":"listItem","spread":true,"position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"inlineCode","value":"astropy","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"xwuRURLKzH"},{"type":"text","value":" to work with coordinates/units and data structures","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"FlZG7ZcRvu"}],"key":"mmvFOMtyLx"},{"type":"listItem","spread":true,"position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"inlineCode","value":"tqdm","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"AHBFOdYjHN"},{"type":"text","value":" for showing progress meter","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"QzAfLyeJjf"}],"key":"nX8050qecL"},{"type":"listItem","spread":true,"position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"children":[{"type":"inlineCode","value":"sktime","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"key":"vV056e1soB"},{"type":"text","value":" ML algorithms specifically for time-domain data","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"key":"HmeGwWJKxA"}],"key":"EP83kUjHVM"},{"type":"listItem","spread":true,"position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"children":[{"type":"inlineCode","value":"sklearn","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"Snr4ptaU4m"},{"type":"text","value":" general use ML algorthims with easy to use interface","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"btwkgtne99"}],"key":"OiVe7bfjBU"},{"type":"listItem","spread":true,"position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"children":[{"type":"inlineCode","value":"scipy","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"A02HGO6BJr"},{"type":"text","value":" for statistical analysis","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"h55SHsxNEY"}],"key":"sYHCDjN6VY"},{"type":"listItem","spread":true,"position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"inlineCode","value":"json","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"wFLyo6tCJL"},{"type":"text","value":" for storing intermediate files","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"zvTwyiNChl"}],"key":"O800ZqIkqI"},{"type":"listItem","spread":true,"position":{"start":{"line":72,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"inlineCode","value":"google_drive_downloader","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"mM0ggPKTb5"},{"type":"text","value":" to access files stored in google drive","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"dbKJkMmUkK"}],"key":"rwgmHUdwpZ"}],"key":"o4goJZId8j"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"This cell will install them if needed:","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"xUbJgcG2WB"}],"key":"JR0sE8WBBP"}],"key":"XummlI4iC3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# %pip install -r requirements_light_curve_classifier.txt","key":"zE8YmTw0L0"},{"type":"output","id":"USy9YzghBrW84QiwqVagM","data":[],"key":"eup52j3uvq"}],"key":"XVaWzGgAXj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import sys\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nimport pandas as pd\nfrom astropy.table import Table\nimport googledrivedownloader as gdd\nfrom tqdm.auto import tqdm\nimport json\n\nfrom sklearn.metrics import ConfusionMatrixDisplay, accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\n\nfrom sktime.classification.deep_learning import CNNClassifier\nfrom sktime.classification.dictionary_based import IndividualTDE\nfrom sktime.classification.distance_based import KNeighborsTimeSeriesClassifier\nfrom sktime.classification.dummy import DummyClassifier\nfrom sktime.classification.ensemble import WeightedEnsembleClassifier\nfrom sktime.classification.feature_based import Catch22Classifier, RandomIntervalClassifier\nfrom sktime.classification.hybrid import HIVECOTEV2\nfrom sktime.classification.interval_based import CanonicalIntervalForest\nfrom sktime.classification.kernel_based import Arsenal, RocketClassifier\nfrom sktime.classification.shapelet_based import ShapeletTransformClassifier\nfrom sktime.registry import all_estimators, all_tags\nfrom sktime.datatypes import check_is_mtype\n\n# local code imports\nsys.path.append('code_src/')\nfrom classifier_functions import sigmaclip_lightcurves, remove_objects_without_band, \\\nremove_incomplete_data, missingdata_to_zeros, missingdata_drop_bands, \\\nuniform_length_spacing, reformat_df, local_normalization_max, mjd_to_datetime\n\n#improves memory usage and avoids problems that trigger warnings\npd.options.mode.copy_on_write = True","key":"rTPWGhBAay"},{"type":"output","id":"laDwOVMZ-GzU4AEfuUj6S","data":[],"key":"gX1ZzKIva6"}],"key":"hURpOLWUAI"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"children":[{"type":"text","value":"1. Read in a dataset of archival light curves","position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"key":"dDA1ZHOtQo"}],"identifier":"id-1-read-in-a-dataset-of-archival-light-curves","label":"1. Read in a dataset of archival light curves","html_id":"id-1-read-in-a-dataset-of-archival-light-curves","implicit":true,"key":"EYMnpWmQfD"},{"type":"paragraph","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"We use here a sample of AGN including known CLAGN & random SDSS AGN","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"NT9iBYKzTV"}],"key":"HrrK9GWYtV"},{"type":"paragraph","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"text","value":"If you want to use your own sample, you can use the code ","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"u5rY4erRB8"},{"type":"link","url":"https://nasa-fornax.github.io/fornax-demo-notebooks/light_curves/light_curve_collector.html","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"text","value":"light​_curve​_collector​.md","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"KG4qstOn2O"}],"urlSource":"https://nasa-fornax.github.io/fornax-demo-notebooks/light_curves/light_curve_collector.html","key":"u1IiJYYOT5"},{"type":"text","value":" in this same repo to make the required pandas dataframe which you will need to run this notebook.","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"Ij0GOTdUfi"}],"key":"Aqph6ccoue"}],"key":"ccvBYU8l36"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# First we want to load light curves made in the light_curve_collector notebook\n\n# The data is on google drive, this will download it for you and read it into\n# a pandas dataframe\nsavename_df_lc = './data/small_CLAGN_SDSS_df_lc.parquet'\ngdd.download_file_from_google_drive(file_id='1DrB-CWdBBBYuO0WzNnMl5uQnnckL7MWH',\n                                    dest_path=savename_df_lc,\n                                    unzip=True)\n\n#load the data into a pandas dataframe\ndf_lc = pd.read_parquet(savename_df_lc)","key":"uKF7QBH9rk"},{"type":"output","id":"SSrdXW9kVTxCX1rfTuETq","data":[{"output_type":"stream","name":"stdout","text":"Downloading 1DrB-CWdBBBYuO0WzNnMl5uQnnckL7MWH into ./data/small_CLAGN_SDSS_df_lc.parquet... "},{"output_type":"stream","name":"stdout","text":"Done.\nUnzipping..."},{"output_type":"stream","name":"stderr","text":"/home/runner/work/fornax-demo-notebooks/fornax-demo-notebooks/.tox/py312-buildhtml/lib/python3.12/site-packages/googledrivedownloader/download.py:88: UserWarning: Ignoring `unzip` since \"1DrB-CWdBBBYuO0WzNnMl5uQnnckL7MWH\" does not look like a valid zip file\n  warnings.warn('Ignoring `unzip` since \"{}\" does not look like a valid zip file'.format(file_id))\n"}],"key":"bFQRXR1VSC"}],"key":"J4siX4mjvn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#get rid of indices set in the light curve code and reset them as needed\n#before sktime algorithms\ndf_lc = df_lc.reset_index()\n\n#what does the dataset look like at the start?\ndf_lc","key":"BHbYkqm5NC"},{"type":"output","id":"03v9MYUX8upKJEHsIwuCv","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/plain":{"content":"        objectid       label        band          time      flux  err\n0             15  MacLeod 19  SAXGRBMGRB  50335.861597  0.100000  0.1\n1            240        SDSS  SAXGRBMGRB  51601.900023  0.100000  0.1\n2            364        SDSS  SAXGRBMGRB  50594.078796  0.100000  0.1\n3            169        SDSS  SAXGRBMGRB  51373.759595  0.100000  0.1\n4            446        SDSS  SAXGRBMGRB  50991.525394  0.100000  0.1\n...          ...         ...         ...           ...       ...  ...\n458312       453        SDSS          K2  60148.521180  1.020081  NaN\n458313       453        SDSS          K2  60149.195427  1.014221  NaN\n458314       453        SDSS          K2  60149.930970  1.009093  NaN\n458315       453        SDSS          K2  60150.584787  1.003534  NaN\n458316       453        SDSS          K2  60151.238603  1.000992  NaN\n\n[458317 rows x 6 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>objectid</th>\n      <th>label</th>\n      <th>band</th>\n      <th>time</th>\n      <th>flux</th>\n      <th>err</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15</td>\n      <td>MacLeod 19</td>\n      <td>SAXGRBMGRB</td>\n      <td>50335.861597</td>\n      <td>0.100000</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>240</td>\n      <td>SDSS</td>\n      <td>SAXGRBMGRB</td>\n      <td>51601.900023</td>\n      <td>0.100000</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>364</td>\n      <td>SDSS</td>\n      <td>SAXGRBMGRB</td>\n      <td>50594.078796</td>\n      <td>0.100000</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>169</td>\n      <td>SDSS</td>\n      <td>SAXGRBMGRB</td>\n      <td>51373.759595</td>\n      <td>0.100000</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>446</td>\n      <td>SDSS</td>\n      <td>SAXGRBMGRB</td>\n      <td>50991.525394</td>\n      <td>0.100000</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>458312</th>\n      <td>453</td>\n      <td>SDSS</td>\n      <td>K2</td>\n      <td>60148.521180</td>\n      <td>1.020081</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>458313</th>\n      <td>453</td>\n      <td>SDSS</td>\n      <td>K2</td>\n      <td>60149.195427</td>\n      <td>1.014221</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>458314</th>\n      <td>453</td>\n      <td>SDSS</td>\n      <td>K2</td>\n      <td>60149.930970</td>\n      <td>1.009093</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>458315</th>\n      <td>453</td>\n      <td>SDSS</td>\n      <td>K2</td>\n      <td>60150.584787</td>\n      <td>1.003534</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>458316</th>\n      <td>453</td>\n      <td>SDSS</td>\n      <td>K2</td>\n      <td>60151.238603</td>\n      <td>1.000992</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>458317 rows × 6 columns</p>\n</div>","content_type":"text/html"}}}],"key":"P5u4rKniHb"}],"key":"td5frMJ3on"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"children":[{"type":"text","value":"2. Data Prep","position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"key":"H0Wy6JxYXF"}],"identifier":"id-2-data-prep","label":"2. Data Prep","html_id":"id-2-data-prep","implicit":true,"key":"GOfhJ3mjjJ"},{"type":"paragraph","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"text","value":"The majority of work in all ML projects is preparing and cleaning the data.  As most do, this dataset needs significant work before it can be fed into a ML algorithm.  Data preparation includes everything from removing statistical outliers to putting it in the correct data format for the algorithms.","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"r5txRjBxMr"}],"key":"Jby8kDM0vj"}],"key":"NaGEiOJMfS"},{"type":"block","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"heading","depth":3,"position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"2.1 Remove bands with not enough data","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"RM3QrPKW1v"}],"identifier":"id-2-1-remove-bands-with-not-enough-data","label":"2.1 Remove bands with not enough data","html_id":"id-2-1-remove-bands-with-not-enough-data","implicit":true,"key":"dXPHn54twA"},{"type":"paragraph","position":{"start":{"line":158,"column":1},"end":{"line":160,"column":1}},"children":[{"type":"text","value":"For this use case of CLAGN classification, we don’t need to include some of the bands\nthat are known to be sparse.  Most ML algorithms cannot handle sparse data so one way to accomodate that\nis to remove the sparsest datasets.","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"key":"V6yHI6FTSj"}],"key":"aFrTqqhffX"}],"key":"I8pfGLBElG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"##what are the unique set of bands included in our light curves\ndf_lc.band.unique()\n\n#get rid of some of the bands that don't have enough data for all the sources\n#CLAGN are generall fainter targets, and therefore mostly not found\n#in datasets like TESS & K2\n\nbands_to_drop = [\"IceCube\", \"TESS\", \"FERMIGTRIG\", \"K2\"]\ndf_lc = df_lc[~df_lc[\"band\"].isin(bands_to_drop)]","key":"NmRDNIGwoh"},{"type":"output","id":"Q4Jy-uSHROhxAnC1HRtTZ","data":[],"key":"F97ePaBnqH"}],"key":"H1Mdumtj91"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"children":[{"type":"text","value":"2.2 Combine Labels for a Simpler Classification","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"key":"fWmCW7a5rf"}],"identifier":"id-2-2-combine-labels-for-a-simpler-classification","label":"2.2 Combine Labels for a Simpler Classification","html_id":"id-2-2-combine-labels-for-a-simpler-classification","implicit":true,"key":"zBHBBj1m4l"},{"type":"paragraph","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"children":[{"type":"text","value":"All CLAGN start in the dataset as having labels based on their discovery paper.  Because we want one sample with all known CLAGN, we change those discovery names to be simply “CLAGN” for all CLAGN, regardless of origin.","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"RNbT3TUf6r"}],"key":"YXAgQuFyHZ"}],"key":"CyynEJiV36"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"df_lc['label'] = df_lc.label.str.replace('MacLeod 16', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('LaMassa 15', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('Yang 18', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('Lyu 22', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('Hon 22', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('Sheng 20', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('MacLeod 19', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('Green 22', 'CLAGN')\ndf_lc['label'] = df_lc.label.str.replace('Lopez-Navas 22', 'CLAGN')","key":"LBaFCIni5J"},{"type":"output","id":"WP9hpbCjgq9M6CQFGHFoG","data":[],"key":"FuyoJshNwN"}],"key":"OBx7fcXHvj"},{"type":"block","children":[],"key":"wWPrMjxNSy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(df_lc.groupby([\"objectid\"]).ngroups, \"n objects before removing missing band data\")","key":"KuKIL6o0T4"},{"type":"output","id":"VLsnccpDBohNwwoGvx65j","data":[{"output_type":"stream","name":"stdout","text":"451 n objects before removing missing band data\n"}],"key":"jjH7RtDPC5"}],"key":"kB7Hxfl7LV"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":194,"column":1},"end":{"line":194,"column":1}},"children":[{"type":"text","value":"2.3 Data Visualization","position":{"start":{"line":194,"column":1},"end":{"line":194,"column":1}},"key":"gHRsdPTY26"}],"identifier":"id-2-3-data-visualization","label":"2.3 Data Visualization","html_id":"id-2-3-data-visualization","implicit":true,"key":"dOdTsu3Rk9"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":196,"column":1},"end":{"line":197,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":196,"column":1},"end":{"line":197,"column":1}},"children":[{"type":"text","value":"can we see any trends by examining plots of a subset of the data?","position":{"start":{"line":196,"column":1},"end":{"line":196,"column":1}},"key":"ldF6Xie7YV"}],"key":"JIZYJGIYFj"}],"key":"vpXmYFN5cF"}],"key":"kMI3YsBK6w"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#chhose your own adventure, the bands from which you can choose are:\ndf_lc.band.unique()","key":"K4Fwkiqs8m"},{"type":"output","id":"3JeEjsXoDUwTz3T9DnBaE","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"array(['SAXGRBMGRB', 'G', 'BP', 'RP', 'panstarrs i', 'panstarrs y',\n       'panstarrs z', 'panstarrs g', 'panstarrs r', 'zg', 'zi', 'zr',\n       'W1', 'W2', 'k2'], dtype=object)","content_type":"text/plain"}}}],"key":"Sr018prIVV"}],"key":"uj6VH2tIjC"},{"type":"block","children":[],"key":"B8xwSR7Q6g"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#plot a single band for all objects\nband_of_interest = 'zr'\nband_lc = df_lc[df_lc['band'] == band_of_interest]\n#reset zero time to be start of that mission\nband_lc[\"time\"] = band_lc[\"time\"] - band_lc[\"time\"].min()\nband_lc.time.min()\n\nband_lc.set_index('time', inplace = True)  #helps with the plotting\n\n#drop some objects to try to clear up plot\nquerystring1 = 'objectid < 162'\nquerystring2 = 'objectid > 200'\nband_lc = band_lc.drop(band_lc.query(querystring1 ).index)\nband_lc = band_lc.drop(band_lc.query(querystring2 ).index)\n\n#quick normalization for plotting\n#we normalize for real after cleaning the data\n# make a new column with max_r_flux for each objectid\nband_lc['mean_band'] = band_lc.groupby('objectid', sort=False)[\"flux\"].transform('mean')\nband_lc['sigma_band'] = band_lc.groupby('objectid', sort=False)[\"flux\"].transform('std')\n\n#choose to normalize (flux - mean) / sigma\nband_lc['flux'] = (band_lc['flux'] - band_lc['mean_band']).div(band_lc['sigma_band'], axis=0)\n\n#want to have two different sets so I can color code\nclagn_df = band_lc[band_lc['label'] == 'CLAGN']\nsdss_df = band_lc[band_lc['label'] == 'SDSS']\nprint(clagn_df.groupby([\"objectid\"]).ngroups, \"n objects CLAGN \")\nprint(sdss_df.groupby([\"objectid\"]).ngroups, \"n objects SDSS \")\n\n#groupy objectid & plot flux vs. time\nfig, ax = plt.subplots(figsize=(10,6))\nlc_sdss = sdss_df.groupby(['objectid'])['flux'].plot(kind='line', ax=ax, color = 'gray', label = 'SDSS', linewidth = 0.3)\nlc_clagn = clagn_df.groupby(['objectid'])['flux'].plot(kind='line', ax=ax, color = 'orange', label = 'CLAGN', linewidth = 1)\n\n#add legend and labels/titles\nlegend_elements = [Line2D([0], [0], color='orange', lw=4, label='CLAGN'),\n                   Line2D([0], [0], color='gray', lw=4, label='SDSS')]\nax.legend(handles=legend_elements, loc='best')\n\nax.set_ylabel('Normalized Flux')\nax.set_xlabel('Time in days since start of mission')\nplt.title(f\"{band_of_interest} light curves\")\n\n#tailored to ZTF r band with lots of data\nax.set_ylim([-2, 4])\nax.set_xlim([1000, 1250])","key":"n0MHpucpAB"},{"type":"output","id":"YNxrVfp7LkbPXSC05dAo_","data":[{"output_type":"stream","name":"stdout","text":"2 n objects CLAGN \n34 n objects SDSS \n"},{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"(1000.0, 1250.0)","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1000x600 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1fb474e56caea4846ccce727de3833bd","path":"/fornax-demo-notebooks/build/1fb474e56caea4846ccce727de3833bd.png"}}}],"key":"nqINFtHcFA"}],"key":"e2dhZMFI2y"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"2.4 Clean the dataset of unwanted data","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"ll7CVKqeTO"}],"identifier":"id-2-4-clean-the-dataset-of-unwanted-data","label":"2.4 Clean the dataset of unwanted data","html_id":"id-2-4-clean-the-dataset-of-unwanted-data","implicit":true,"key":"zeNzeIcQIu"},{"type":"paragraph","position":{"start":{"line":255,"column":1},"end":{"line":255,"column":1}},"children":[{"type":"text","value":"“unwanted” includes:","position":{"start":{"line":255,"column":1},"end":{"line":255,"column":1}},"key":"hvmhEkm7sP"}],"key":"lsIqlrNiAB"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":256,"column":1},"end":{"line":267,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":256,"column":1},"end":{"line":257,"column":1}},"children":[{"type":"text","value":"NaNs","position":{"start":{"line":256,"column":1},"end":{"line":256,"column":1}},"key":"Hju34Lcr8V"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":257,"column":1},"end":{"line":257,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":257,"column":1},"end":{"line":257,"column":1}},"children":[{"type":"text","value":"SKtime does not work with NaNs","position":{"start":{"line":257,"column":1},"end":{"line":257,"column":1}},"key":"wCn0BPon2l"}],"key":"WF2C3LW2dD"}],"key":"qa1Uh69mVx"}],"key":"CmO1Lz5QpB"},{"type":"listItem","spread":true,"position":{"start":{"line":258,"column":1},"end":{"line":259,"column":1}},"children":[{"type":"text","value":"zero flux","position":{"start":{"line":258,"column":1},"end":{"line":258,"column":1}},"key":"HjdliXqabV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":259,"column":1},"end":{"line":259,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":259,"column":1},"end":{"line":259,"column":1}},"children":[{"type":"text","value":"there are a few flux measurements that come into our dataframe with zeros.  It is not clear what these are, and zero will be used to mean lack of observation in the rest of this notebook, so want to drop these rows at the outset.","position":{"start":{"line":259,"column":1},"end":{"line":259,"column":1}},"key":"t4cv51rMyd"}],"key":"vEjBVeoFWG"}],"key":"lcl0rfRN2R"}],"key":"AlA9nPySYC"},{"type":"listItem","spread":true,"position":{"start":{"line":260,"column":1},"end":{"line":261,"column":1}},"children":[{"type":"text","value":"outliers in uncertainty","position":{"start":{"line":260,"column":1},"end":{"line":260,"column":1}},"key":"OkJUpEqcHE"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":261,"column":1},"end":{"line":261,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":261,"column":1},"end":{"line":261,"column":1}},"children":[{"type":"text","value":"This is a tricky job because we want to keep astrophysical sources that are variable objects, but remove instrumental noise and CR (ground based).  The user will need to choose a sigma clipping threshold, and there is some plotting functionality available to help users make that decision","position":{"start":{"line":261,"column":1},"end":{"line":261,"column":1}},"key":"eufe0zRR3l"}],"key":"RxeT8qQxJ3"}],"key":"hB13jVEicS"}],"key":"FoBCdryiFH"},{"type":"listItem","spread":true,"position":{"start":{"line":262,"column":1},"end":{"line":263,"column":1}},"children":[{"type":"text","value":"objects with no measurements in WISE W1 band","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"key":"mFTZPpnHXQ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":263,"column":1},"end":{"line":263,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":263,"column":1},"end":{"line":263,"column":1}},"children":[{"type":"text","value":"Below we want to normalize all light curves by W1, so we neeed to remove those objects without W1 fluxes because there will be nothing to normalize those light curves with.  We don’t want to have un-normalized data.","position":{"start":{"line":263,"column":1},"end":{"line":263,"column":1}},"key":"C6DMt2tB2Q"}],"key":"v1lCKXqG0c"}],"key":"CKIgXox0GI"}],"key":"tJop2Z9pI9"},{"type":"listItem","spread":true,"position":{"start":{"line":264,"column":1},"end":{"line":267,"column":1}},"children":[{"type":"text","value":"objects with incomplete data","position":{"start":{"line":264,"column":1},"end":{"line":264,"column":1}},"key":"Z5SE1XKy0k"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":265,"column":1},"end":{"line":267,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":265,"column":1},"end":{"line":267,"column":1}},"children":[{"type":"text","value":"Incomplete is defined here as not enough flux measurements to make a good light curve.  Some bands in some objects have only a few datapoints. Three data points is not large enough for KNN interpolation, so we will consider any array with fewer than 4 photometry points to be incomplete data.  Another way of saying this is that we choose to remove those light curves with 3 or\nfewer data points.","position":{"start":{"line":265,"column":1},"end":{"line":265,"column":1}},"key":"dxoFjbmQZG"}],"key":"Rwe2ZAng7J"}],"key":"Z3iXHwnYxB"}],"key":"k3M6EcRcgS"}],"key":"bjmFNu7qhj"}],"key":"HNxNUB5RYB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#drop rows which have Nans\ndf_lc.dropna(inplace = True, axis = 0)\n\n#drop rows with zero flux\nquerystring = 'flux < 0.000001'\ndf_lc = df_lc.drop(df_lc.query(querystring).index)\n\n#remove outliers\nsigmaclip_value = 10.0\ndf_lc = sigmaclip_lightcurves(df_lc, sigmaclip_value, include_plot = False)\nprint(df_lc.groupby([\"objectid\"]).ngroups, \"n objects after sigma clipping\")\n\n#remove incomplete data\nthreshold_too_few = 3\ndf_lc = remove_incomplete_data(df_lc, threshold_too_few, verbose = False)\n\n#remove objects without W1 fluxes\ndf_lc = remove_objects_without_band(df_lc, 'W1', verbose=True)\n\nprint(df_lc.groupby([\"objectid\"]).ngroups, \"n objects after cleaning the data\")","key":"l0Mdlakgy3"},{"type":"output","id":"WCsJqr1dul_glOlUcuMAP","data":[{"output_type":"stream","name":"stdout","text":"451 n objects after sigma clipping\n"},{"output_type":"stream","name":"stdout","text":"18 objects without W1  were removed\n431 n objects after cleaning the data\n"}],"key":"AeOUn0f1u9"}],"key":"tOv7ksw2JZ"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":291,"column":1},"end":{"line":291,"column":1}},"children":[{"type":"text","value":"2.5 Missing Data","position":{"start":{"line":291,"column":1},"end":{"line":291,"column":1}},"key":"sL4fuXgUDg"}],"identifier":"id-2-5-missing-data","label":"2.5 Missing Data","html_id":"id-2-5-missing-data","implicit":true,"key":"qEojbIRp1a"},{"type":"paragraph","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"children":[{"type":"text","value":"Some objects do not have light curves in all bands.  Some ML algorithms can handle mising data, but not all, so we try to do something intentional and sensible to handle this missing data up front.","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"key":"zMYLXIvk8T"}],"key":"SebDXDfbdI"},{"type":"paragraph","position":{"start":{"line":295,"column":1},"end":{"line":295,"column":1}},"children":[{"type":"text","value":"There are two options here:","position":{"start":{"line":295,"column":1},"end":{"line":295,"column":1}},"key":"I2nikzBNeG"}],"key":"g7fAJKB2wB"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":296,"column":1},"end":{"line":298,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":296,"column":1},"end":{"line":296,"column":1}},"children":[{"type":"text","value":"We will add light curves with zero flux and err values for the missing data.  SKtime does not like NaNs, so we choose zeros.  This option has the benefit of including more bands and therefore more information, but the drawback of having some objects have bands with entire arrays of zeros.","position":{"start":{"line":296,"column":1},"end":{"line":296,"column":1}},"key":"pyH7Ne1GRH"}],"key":"goX4D0ikfA"},{"type":"listItem","spread":true,"position":{"start":{"line":297,"column":1},"end":{"line":298,"column":1}},"children":[{"type":"text","value":"Remove bands which have less data from all objects so that there are no objects with missing data.  This has the benefit of less zeros, but the disadvantage of throwing away some information for the few objects which do have light curves in the bands which will be removed.","position":{"start":{"line":297,"column":1},"end":{"line":297,"column":1}},"key":"jiwNsNr5em"}],"key":"MnCRYMs7IC"}],"key":"kZjTASFoav"},{"type":"paragraph","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"children":[{"type":"text","value":"Functions are inlcuded for both options.","position":{"start":{"line":299,"column":1},"end":{"line":299,"column":1}},"key":"Le99ztT40N"}],"key":"E839KU4xZ9"}],"key":"ERaQlxdck1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#choose what to do with missing data...\n#df_lc = missingdata_to_zeros(df_lc)\n#or\nbands_to_keep = ['W1','W2','panstarrs g','panstarrs i', 'panstarrs r','panstarrs y','panstarrs z','zg','zr']\ndf_lc = missingdata_drop_bands(df_lc, bands_to_keep, verbose = True)","key":"eP46FJHiUz"},{"type":"output","id":"2jMrgx0tPzAvDOQ1FweYg","data":[{"output_type":"stream","name":"stdout","text":"431 n objects before removing missing band data\n357 n objects after removing missing band data\n"}],"key":"fRcijVCy1u"}],"key":"iziiy0DvQz"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"children":[{"type":"text","value":"2.6  Make all objects and bands have identical time arrays (uniform length and spacing)","position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"key":"FPzZ6XYbGz"}],"identifier":"id-2-6-make-all-objects-and-bands-have-identical-time-arrays-uniform-length-and-spacing","label":"2.6  Make all objects and bands have identical time arrays (uniform length and spacing)","html_id":"id-2-6-make-all-objects-and-bands-have-identical-time-arrays-uniform-length-and-spacing","implicit":true,"key":"XKrYO9QnFg"},{"type":"paragraph","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"children":[{"type":"text","value":"It is very hard to find time-domain ML algorithms which can work with non uniform length datasets. Therefore we make the light curves uniform by interpolating using KNN from scikit-learn which fills in the uniform length arrays with a final frequency chosen by the user.  We choose KNN as very straightforward method. This function also shows the framework in case the user wants to choose a different scikit-learn function to do the interpolation.  Another natural choice would be to use gaussian processes (GP) to do the interpolation, but this is not a good solution for our task because the flux values go to zero at times before and after the observations.  Because we include the entire time array from beginning of the first mission to end of the last mission, most individual bands require interpolation before and after their particular observations.  In other words, our light curves span the entire range from 2010 with the start of panstarrs and WISE to the most recent ZTF data release (at least 2023), even though most individual missions do not cover that full range of time.","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"H4b7j0tnDC"}],"key":"Zj4JVNfba2"},{"type":"paragraph","position":{"start":{"line":313,"column":1},"end":{"line":313,"column":1}},"children":[{"type":"text","value":"It is important to choose the frequency over which the data is interpolated wisely.  Experimentation with treating this variable like a hyperparam and testing sktime algorithms shows slightly higher accuracy values for a suite of algorithms for a frequency of one interpolated observation per 60 days.","position":{"start":{"line":313,"column":1},"end":{"line":313,"column":1}},"key":"tb1gvkkVrU"}],"key":"ytRppqUau4"}],"key":"XHQpkb2lNl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#what does the dataframe look like at this point in the code?\ndf_lc","key":"YTxs29tMvl"},{"type":"output","id":"ZsQWicuYUwr4-mH-zQ3OK","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"        objectid  label         band          time      flux       err\n12489          1  CLAGN  panstarrs i  55174.305492  0.100490  0.001102\n12490          1  CLAGN  panstarrs i  55174.308519  0.090206  0.000985\n12491          1  CLAGN  panstarrs y  55416.614225  0.130497  0.007047\n12492          1  CLAGN  panstarrs y  55416.625133  0.133000  0.006277\n12493          1  CLAGN  panstarrs z  55427.627576  0.118545  0.002673\n...          ...    ...          ...           ...       ...       ...\n412825       458   SDSS           W2  58283.310746  1.793368  0.015925\n412826       458   SDSS           W2  58490.115697  1.630802  0.017747\n412827       458   SDSS           W2  58650.370860  1.674718  0.017944\n412828       458   SDSS           W2  58854.359409  1.475255  0.017491\n412829       458   SDSS           W2  59014.562406  1.400782  0.017341\n\n[346191 rows x 6 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>objectid</th>\n      <th>label</th>\n      <th>band</th>\n      <th>time</th>\n      <th>flux</th>\n      <th>err</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>12489</th>\n      <td>1</td>\n      <td>CLAGN</td>\n      <td>panstarrs i</td>\n      <td>55174.305492</td>\n      <td>0.100490</td>\n      <td>0.001102</td>\n    </tr>\n    <tr>\n      <th>12490</th>\n      <td>1</td>\n      <td>CLAGN</td>\n      <td>panstarrs i</td>\n      <td>55174.308519</td>\n      <td>0.090206</td>\n      <td>0.000985</td>\n    </tr>\n    <tr>\n      <th>12491</th>\n      <td>1</td>\n      <td>CLAGN</td>\n      <td>panstarrs y</td>\n      <td>55416.614225</td>\n      <td>0.130497</td>\n      <td>0.007047</td>\n    </tr>\n    <tr>\n      <th>12492</th>\n      <td>1</td>\n      <td>CLAGN</td>\n      <td>panstarrs y</td>\n      <td>55416.625133</td>\n      <td>0.133000</td>\n      <td>0.006277</td>\n    </tr>\n    <tr>\n      <th>12493</th>\n      <td>1</td>\n      <td>CLAGN</td>\n      <td>panstarrs z</td>\n      <td>55427.627576</td>\n      <td>0.118545</td>\n      <td>0.002673</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>412825</th>\n      <td>458</td>\n      <td>SDSS</td>\n      <td>W2</td>\n      <td>58283.310746</td>\n      <td>1.793368</td>\n      <td>0.015925</td>\n    </tr>\n    <tr>\n      <th>412826</th>\n      <td>458</td>\n      <td>SDSS</td>\n      <td>W2</td>\n      <td>58490.115697</td>\n      <td>1.630802</td>\n      <td>0.017747</td>\n    </tr>\n    <tr>\n      <th>412827</th>\n      <td>458</td>\n      <td>SDSS</td>\n      <td>W2</td>\n      <td>58650.370860</td>\n      <td>1.674718</td>\n      <td>0.017944</td>\n    </tr>\n    <tr>\n      <th>412828</th>\n      <td>458</td>\n      <td>SDSS</td>\n      <td>W2</td>\n      <td>58854.359409</td>\n      <td>1.475255</td>\n      <td>0.017491</td>\n    </tr>\n    <tr>\n      <th>412829</th>\n      <td>458</td>\n      <td>SDSS</td>\n      <td>W2</td>\n      <td>59014.562406</td>\n      <td>1.400782</td>\n      <td>0.017341</td>\n    </tr>\n  </tbody>\n</table>\n<p>346191 rows × 6 columns</p>\n</div>","content_type":"text/html"}}}],"key":"EWORtnAHVs"}],"key":"gPybO5XjNy"},{"type":"block","children":[],"key":"zyGfYZOWAo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#this cell takes 13seconds to run on the sample of 458 sources\n#change this to change the frequency of the time array\nfinal_freq_interpol = 60  #this is the timescale of interpolation in units of days\n\n#make all light curves have the same time array\ndf_interpol = uniform_length_spacing(df_lc, final_freq_interpol, include_plot = True )\n\n# df_lc_interpol has one row per dict in lc_interpol. time and flux columns store arrays.\n# \"explode\" the dataframe to get one row per light curve point. time and flux columns will now store floats.\ndf_lc = df_interpol.explode([\"time\", \"flux\",\"err\"], ignore_index=True)\ndf_lc = df_lc.astype({col: \"float\" for col in [\"time\", \"flux\", \"err\"]})","key":"a9JacwfuTK"},{"type":"output","id":"F3HyQM7xwf7qUaCXR5wus","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"43d1d57207619d42cbfbb49431cc3c2b","path":"/fornax-demo-notebooks/build/43d1d57207619d42cbfbb49431cc3c2b.png"}}}],"key":"o8xJ90ATv4"}],"key":"oQpmIzumZs"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"children":[{"type":"text","value":"2.7  Restructure dataframe","position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"key":"iG5LgoC8CN"}],"identifier":"id-2-7-restructure-dataframe","label":"2.7  Restructure dataframe","html_id":"id-2-7-restructure-dataframe","implicit":true,"key":"VZjZhnmlp6"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":336,"column":1},"end":{"line":339,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"children":[{"type":"text","value":"Make columns have band names in them and then remove band from the index","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"key":"pntwdz1Il9"}],"key":"YH0XuYjRVo"},{"type":"listItem","spread":true,"position":{"start":{"line":337,"column":1},"end":{"line":337,"column":1}},"children":[{"type":"text","value":"pivot the dataframe so that SKTIME understands its format","position":{"start":{"line":337,"column":1},"end":{"line":337,"column":1}},"key":"X8mKYy6GaQ"}],"key":"sWvJGKc7yZ"},{"type":"listItem","spread":true,"position":{"start":{"line":338,"column":1},"end":{"line":339,"column":1}},"children":[{"type":"text","value":"this will put it in the format expected by sktime","position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"key":"Ekg7Hoe1Zu"}],"key":"BrSworIQYI"}],"key":"eBKP7LSPOs"}],"key":"Bc7aYVBOum"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#reformat the data to have columns be the different flux bands\ndf_lc = reformat_df(df_lc)","key":"msck6jZCFZ"},{"type":"output","id":"ZAfsVWUPVWWKwMnDknANG","data":[],"key":"UI9OFcojBd"}],"key":"dTO2Diw8I8"},{"type":"block","children":[],"key":"YDu0YM3pL5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#look at a single object to see what this array looks like\nob_of_interest = 12\nsingleob = df_lc[df_lc['objectid'] == ob_of_interest]\nsingleob","key":"DnSygKRTzg"},{"type":"output","id":"p-aU9ibj0LQA0ehNH8Ke_","data":[{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"text/plain":{"content":"     objectid  label          time   flux_W1   flux_W2  flux_panstarrs_g  \\\n850        12  CLAGN  54985.275796  0.171426  0.183990          0.014124   \n851        12  CLAGN  55045.275796  0.171426  0.183990          0.014124   \n852        12  CLAGN  55105.275796  0.171426  0.183990          0.014124   \n853        12  CLAGN  55165.275796  0.171426  0.183990          0.014124   \n854        12  CLAGN  55225.275796  0.171426  0.183990          0.014124   \n..        ...    ...           ...       ...       ...               ...   \n930        12  CLAGN  59785.275796  0.193756  0.167459          0.024364   \n931        12  CLAGN  59845.275796  0.193756  0.167459          0.024364   \n932        12  CLAGN  59905.275796  0.193756  0.167459          0.024364   \n933        12  CLAGN  59965.275796  0.193756  0.167459          0.024364   \n934        12  CLAGN  60025.275796  0.193756  0.167459          0.024364   \n\n     flux_panstarrs_i  flux_panstarrs_r  flux_panstarrs_y  flux_panstarrs_z  \\\n850          0.083940          0.043920          0.068864          0.085598   \n851          0.083940          0.043920          0.068864          0.085598   \n852          0.083940          0.043920          0.068864          0.085598   \n853          0.083940          0.043920          0.068864          0.085598   \n854          0.083940          0.043920          0.068864          0.085598   \n..                ...               ...               ...               ...   \n930          0.059121          0.042884          0.097297          0.087929   \n931          0.059121          0.042884          0.097297          0.087929   \n932          0.059121          0.042884          0.097297          0.087929   \n933          0.059121          0.042884          0.097297          0.087929   \n934          0.059121          0.042884          0.097297          0.087929   \n\n     ...   flux_zr    err_W1    err_W2  err_panstarrs_g  err_panstarrs_i  \\\n850  ...  0.065361  0.007365  0.018009          0.00128         0.002069   \n851  ...  0.065361  0.007365  0.018009          0.00128         0.002069   \n852  ...  0.065361  0.007365  0.018009          0.00128         0.002069   \n853  ...  0.065361  0.007365  0.018009          0.00128         0.002069   \n854  ...  0.065361  0.007365  0.018009          0.00128         0.002069   \n..   ...       ...       ...       ...              ...              ...   \n930  ...  0.057135  0.007365  0.018009          0.00128         0.002069   \n931  ...  0.061469  0.007365  0.018009          0.00128         0.002069   \n932  ...  0.064667  0.007365  0.018009          0.00128         0.002069   \n933  ...  0.063702  0.007365  0.018009          0.00128         0.002069   \n934  ...  0.063702  0.007365  0.018009          0.00128         0.002069   \n\n     err_panstarrs_r  err_panstarrs_y  err_panstarrs_z    err_zg   err_zr  \n850         0.002013         0.007337            0.004  0.003695  0.00521  \n851         0.002013         0.007337            0.004  0.003695  0.00521  \n852         0.002013         0.007337            0.004  0.003695  0.00521  \n853         0.002013         0.007337            0.004  0.003695  0.00521  \n854         0.002013         0.007337            0.004  0.003695  0.00521  \n..               ...              ...              ...       ...      ...  \n930         0.002013         0.007337            0.004  0.003695  0.00521  \n931         0.002013         0.007337            0.004  0.003695  0.00521  \n932         0.002013         0.007337            0.004  0.003695  0.00521  \n933         0.002013         0.007337            0.004  0.003695  0.00521  \n934         0.002013         0.007337            0.004  0.003695  0.00521  \n\n[85 rows x 21 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>objectid</th>\n      <th>label</th>\n      <th>time</th>\n      <th>flux_W1</th>\n      <th>flux_W2</th>\n      <th>flux_panstarrs_g</th>\n      <th>flux_panstarrs_i</th>\n      <th>flux_panstarrs_r</th>\n      <th>flux_panstarrs_y</th>\n      <th>flux_panstarrs_z</th>\n      <th>...</th>\n      <th>flux_zr</th>\n      <th>err_W1</th>\n      <th>err_W2</th>\n      <th>err_panstarrs_g</th>\n      <th>err_panstarrs_i</th>\n      <th>err_panstarrs_r</th>\n      <th>err_panstarrs_y</th>\n      <th>err_panstarrs_z</th>\n      <th>err_zg</th>\n      <th>err_zr</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>850</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>54985.275796</td>\n      <td>0.171426</td>\n      <td>0.183990</td>\n      <td>0.014124</td>\n      <td>0.083940</td>\n      <td>0.043920</td>\n      <td>0.068864</td>\n      <td>0.085598</td>\n      <td>...</td>\n      <td>0.065361</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>851</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>55045.275796</td>\n      <td>0.171426</td>\n      <td>0.183990</td>\n      <td>0.014124</td>\n      <td>0.083940</td>\n      <td>0.043920</td>\n      <td>0.068864</td>\n      <td>0.085598</td>\n      <td>...</td>\n      <td>0.065361</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>852</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>55105.275796</td>\n      <td>0.171426</td>\n      <td>0.183990</td>\n      <td>0.014124</td>\n      <td>0.083940</td>\n      <td>0.043920</td>\n      <td>0.068864</td>\n      <td>0.085598</td>\n      <td>...</td>\n      <td>0.065361</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>853</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>55165.275796</td>\n      <td>0.171426</td>\n      <td>0.183990</td>\n      <td>0.014124</td>\n      <td>0.083940</td>\n      <td>0.043920</td>\n      <td>0.068864</td>\n      <td>0.085598</td>\n      <td>...</td>\n      <td>0.065361</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>854</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>55225.275796</td>\n      <td>0.171426</td>\n      <td>0.183990</td>\n      <td>0.014124</td>\n      <td>0.083940</td>\n      <td>0.043920</td>\n      <td>0.068864</td>\n      <td>0.085598</td>\n      <td>...</td>\n      <td>0.065361</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>930</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>59785.275796</td>\n      <td>0.193756</td>\n      <td>0.167459</td>\n      <td>0.024364</td>\n      <td>0.059121</td>\n      <td>0.042884</td>\n      <td>0.097297</td>\n      <td>0.087929</td>\n      <td>...</td>\n      <td>0.057135</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>931</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>59845.275796</td>\n      <td>0.193756</td>\n      <td>0.167459</td>\n      <td>0.024364</td>\n      <td>0.059121</td>\n      <td>0.042884</td>\n      <td>0.097297</td>\n      <td>0.087929</td>\n      <td>...</td>\n      <td>0.061469</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>932</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>59905.275796</td>\n      <td>0.193756</td>\n      <td>0.167459</td>\n      <td>0.024364</td>\n      <td>0.059121</td>\n      <td>0.042884</td>\n      <td>0.097297</td>\n      <td>0.087929</td>\n      <td>...</td>\n      <td>0.064667</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>933</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>59965.275796</td>\n      <td>0.193756</td>\n      <td>0.167459</td>\n      <td>0.024364</td>\n      <td>0.059121</td>\n      <td>0.042884</td>\n      <td>0.097297</td>\n      <td>0.087929</td>\n      <td>...</td>\n      <td>0.063702</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n    <tr>\n      <th>934</th>\n      <td>12</td>\n      <td>CLAGN</td>\n      <td>60025.275796</td>\n      <td>0.193756</td>\n      <td>0.167459</td>\n      <td>0.024364</td>\n      <td>0.059121</td>\n      <td>0.042884</td>\n      <td>0.097297</td>\n      <td>0.087929</td>\n      <td>...</td>\n      <td>0.063702</td>\n      <td>0.007365</td>\n      <td>0.018009</td>\n      <td>0.00128</td>\n      <td>0.002069</td>\n      <td>0.002013</td>\n      <td>0.007337</td>\n      <td>0.004</td>\n      <td>0.003695</td>\n      <td>0.00521</td>\n    </tr>\n  </tbody>\n</table>\n<p>85 rows × 21 columns</p>\n</div>","content_type":"text/html"}}}],"key":"xJ5ngIz1gj"}],"key":"iQjHKlaNk1"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":352,"column":1},"end":{"line":352,"column":1}},"children":[{"type":"text","value":"2.8 Normalize","position":{"start":{"line":352,"column":1},"end":{"line":352,"column":1}},"key":"q3yyDXVKd5"}],"identifier":"id-2-8-normalize","label":"2.8 Normalize","html_id":"id-2-8-normalize","implicit":true,"key":"dCyG3du9vb"},{"type":"paragraph","position":{"start":{"line":354,"column":1},"end":{"line":354,"column":1}},"children":[{"type":"text","value":"Normalizing is required so that the CLAGN and it’s comparison SDSS sample don’t have different flux levels.  ML algorithms will easily choose to classify based on overall flux levels, so we want to prevent that by normalizing the fluxes. Normalization with a multiband dataset requires extra thought.  The idea here is that we normalize across each object.  We want the algorithms to know, for example, that within one object W1 will be brighter than ZTF bands but from one object to the next, it will not know that one is brighter than the other.","position":{"start":{"line":354,"column":1},"end":{"line":354,"column":1}},"key":"ypgtmX4K26"}],"key":"HE0lwXlKyk"},{"type":"paragraph","position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"children":[{"type":"text","value":"We do the normalization at this point in the code, rather than before interpolating over time, so that the final light curves are normalized since that is the chunk of information which goes into the ML algorithms.","position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"key":"IcIaioqGxd"}],"key":"RDvqwoQ36T"},{"type":"paragraph","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"children":[{"type":"text","value":"We chose to normalize by the maximum flux in one band, and not median or mean because there are some objects where the median flux = 0.0 if we did a replacement by zeros for missing data.","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"key":"IfbXMe6eHC"}],"key":"W53b3chgIK"}],"key":"tb5IMEnF0K"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#normalize by W1 band\ndf_lc = local_normalization_max(df_lc, norm_column = \"flux_W1\")","key":"PaQ1mSYObF"},{"type":"output","id":"f9ceQ6hnfrLLt2QHM4R9J","data":[],"key":"oujj85RmzK"}],"key":"wfkO6DCF5O"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":365,"column":1},"end":{"line":365,"column":1}},"children":[{"type":"text","value":"2.9 Cleanup","position":{"start":{"line":365,"column":1},"end":{"line":365,"column":1}},"key":"TnzOrUv4Vb"}],"identifier":"id-2-9-cleanup","label":"2.9 Cleanup","html_id":"id-2-9-cleanup","implicit":true,"key":"zRvuUXwMLd"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":367,"column":1},"end":{"line":370,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":367,"column":1},"end":{"line":368,"column":1}},"children":[{"type":"text","value":"Make ","position":{"start":{"line":367,"column":1},"end":{"line":367,"column":1}},"key":"cTa877t2kx"},{"type":"link","url":"https://docs.python.org/3/library/datetime.html#module-datetime","position":{"start":{"line":367,"column":1},"end":{"line":367,"column":1}},"children":[{"type":"text","value":"datetime","position":{"start":{"line":367,"column":1},"end":{"line":367,"column":1}},"key":"LgesPw9v14"}],"urlSource":"https://docs.python.org/3/library/datetime.html#module-datetime","key":"FMQFSqJjWh"},{"type":"text","value":" column","position":{"start":{"line":367,"column":1},"end":{"line":367,"column":1}},"key":"KVNTt9BhNF"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":368,"column":1},"end":{"line":368,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":368,"column":1},"end":{"line":368,"column":1}},"children":[{"type":"text","value":"SKTime wants a datetime column","position":{"start":{"line":368,"column":1},"end":{"line":368,"column":1}},"key":"Z9Gb54OP6Z"}],"key":"atEC98bMDR"}],"key":"ZCjPHKcwvk"}],"key":"ntiSOyQIav"},{"type":"listItem","spread":true,"position":{"start":{"line":369,"column":1},"end":{"line":370,"column":1}},"children":[{"type":"text","value":"Save dataframe","position":{"start":{"line":369,"column":1},"end":{"line":369,"column":1}},"key":"L3keBMhOUi"}],"key":"DpwSDBn3xX"}],"key":"jH55TD5paU"}],"key":"ypmVb49R5p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# need to make a datetime column\ndf_lc['datetime'] = mjd_to_datetime(df_lc)","key":"DcF7DqDbzo"},{"type":"output","id":"A0ZHH66nXo5TVTs0BxczW","data":[],"key":"yCk9QbJSsS"}],"key":"eyMfVfdVxJ"},{"type":"block","children":[],"key":"rkOVPVX5Qk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#save this dataframe to use for the ML below so we don't have to make it every time\nparquet_savename = 'output/df_lc_ML.parquet'\n#df_lc.to_parquet(parquet_savename)\n#print(\"file saved!\")","key":"uaKzbkkhKh"},{"type":"output","id":"c00GSEncebOhzl0kV91S3","data":[],"key":"iMXxid1jAv"}],"key":"NwdX1BWPT9"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":383,"column":1},"end":{"line":383,"column":1}},"children":[{"type":"text","value":"3. Prep for ML algorithms","position":{"start":{"line":383,"column":1},"end":{"line":383,"column":1}},"key":"FFF4cHxim5"}],"identifier":"id-3-prep-for-ml-algorithms","label":"3. Prep for ML algorithms","html_id":"id-3-prep-for-ml-algorithms","implicit":true,"key":"swdxBJNdEw"}],"key":"mhJoI5kSII"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# could load a previously saved file in order to plot\n#parquet_loadname = 'output/df_lc_ML.parquet'\n#df_lc = MultiIndexDFObject()\n#df_lc.data = pd.read_parquet(parquet_loadname)\n#print(\"file loaded!\")","key":"OQkydLep2n"},{"type":"output","id":"LZScg-KSxzDoMc1mnX0Uz","data":[],"key":"TQjIkB0j2O"}],"key":"zZb5qW2j3I"},{"type":"block","children":[],"key":"cUgdfnL3Ne"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#try dropping the uncertainty columns as variables for sktime\ndf_lc.drop(columns = ['err_panstarrs_g',\t'err_panstarrs_i',\t'err_panstarrs_r',\t'err_panstarrs_y',\n                      'err_panstarrs_z',\t'err_W1',\t'err_W2',\t'err_zg',\t'err_zr'], inplace = True)\n\n#drop also the time column because time shouldn't be a feature\ndf_lc.drop(columns = ['time'],inplace = True)","key":"YSxZYitIqF"},{"type":"output","id":"cj7fGE-_W16zVLBiCxiM3","data":[],"key":"FrKIrf7Ht6"}],"key":"UV5ndzmM56"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":402,"column":1},"end":{"line":402,"column":1}},"children":[{"type":"text","value":"3.1 Train test split","position":{"start":{"line":402,"column":1},"end":{"line":402,"column":1}},"key":"bV2gGUJXcl"}],"identifier":"id-3-1-train-test-split","label":"3.1 Train test split","html_id":"id-3-1-train-test-split","implicit":true,"key":"hqz0P6y9ur"},{"type":"paragraph","position":{"start":{"line":404,"column":1},"end":{"line":404,"column":1}},"children":[{"type":"text","value":"We use sklearn’s train test split to randomly split the data into training and testing datasets.  Because thre are uneven numbers of each type (many more SDSS than CLAGN), we want to make sure to stratify evenly by type.","position":{"start":{"line":404,"column":1},"end":{"line":404,"column":1}},"key":"JrkZpdyuJ7"}],"key":"y2nWK2TyUG"}],"key":"n2K0ynksoq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#divide the dataframe into features and labels for ML algorithms\nlabels = df_lc[[\"objectid\", \"label\"]].drop_duplicates().set_index(\"objectid\").label\ndf_lc = df_lc.drop(columns=[\"label\"]).set_index([\"objectid\", \"datetime\"])","key":"aI6r6R0m6K"},{"type":"output","id":"mpWRgK3t6s3xnKQJxVPL9","data":[],"key":"WoMTDvLhTS"}],"key":"urwzxBOfYg"},{"type":"block","children":[],"key":"Pmqfvzy8zZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"test_size = 0.25\n\n#want a stratified split based on label\ntrain_ix, test_ix = train_test_split(df_lc.index.levels[0], stratify = labels, shuffle = True, random_state = 43, test_size = test_size)\n\n#X is defined to be the features\n#y is defined to be the labels\nX_train = df_lc.loc[train_ix]\ny_train = labels.loc[train_ix]\nX_test = df_lc.loc[test_ix]\ny_test = labels.loc[test_ix]\n\n#plot to show how many of each type of object in the test dataset\nplt.figure(figsize=(6,4))\nplt.title(\"Objects in the Test dataset\")\nh = plt.hist(y_test, histtype='stepfilled', orientation='horizontal')","key":"GxgRCzrF8f"},{"type":"output","id":"ygbX9WmHMS9nX8saFF-IJ","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 600x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"da75ccd2332d33d9e6e55119e5b182e8","path":"/fornax-demo-notebooks/build/da75ccd2332d33d9e6e55119e5b182e8.png"}}}],"key":"HzETG9dPbz"}],"key":"cMzywDGZqS"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":431,"column":1},"end":{"line":431,"column":1}},"children":[{"type":"text","value":"4. Run sktime algorithms on the light curves","position":{"start":{"line":431,"column":1},"end":{"line":431,"column":1}},"key":"TyCxaYXCql"}],"identifier":"id-4-run-sktime-algorithms-on-the-light-curves","label":"4. Run sktime algorithms on the light curves","html_id":"id-4-run-sktime-algorithms-on-the-light-curves","implicit":true,"key":"cp9upYaUoS"},{"type":"paragraph","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"children":[{"type":"text","value":"We choose to use ","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"key":"ba8MVRRjoW"},{"type":"link","url":"https://www.sktime.net/en/stable/index.html","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"children":[{"type":"text","value":"sktime","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"key":"BIEsRX083P"}],"urlSource":"https://www.sktime.net/en/stable/index.html","key":"Mu1XiNw06B"},{"type":"text","value":" algorithms beacuse it is a library of many algorithms specifically tailored to time series datasets.  It is based on the sklearn library so syntax is familiar to many users.","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"key":"BOB5NnZGY0"}],"key":"EQ7FsBckGY"},{"type":"paragraph","position":{"start":{"line":435,"column":1},"end":{"line":435,"column":1}},"children":[{"type":"text","value":"Types of classifiers are listed ","position":{"start":{"line":435,"column":1},"end":{"line":435,"column":1}},"key":"nKdcWEIS9Z"},{"type":"link","url":"https://www.sktime.net/en/stable/api_reference/classification.html","position":{"start":{"line":435,"column":1},"end":{"line":435,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":435,"column":1},"end":{"line":435,"column":1}},"key":"TLyNaEj7Od"}],"urlSource":"https://www.sktime.net/en/stable/api_reference/classification.html","key":"T7MguZ0qI5"},{"type":"text","value":".","position":{"start":{"line":435,"column":1},"end":{"line":435,"column":1}},"key":"rr6SesS59J"}],"key":"t79FkPqSKe"},{"type":"paragraph","position":{"start":{"line":437,"column":1},"end":{"line":437,"column":1}},"children":[{"type":"text","value":"This notebook will first show you an example of a single algorithm classifier. Then it will show how to write a for loop over a bunch of classifiers while outputting some metrics of accuracy.","position":{"start":{"line":437,"column":1},"end":{"line":437,"column":1}},"key":"cxq0YI7mnY"}],"key":"sndyM260x3"}],"key":"wrMoNpGtgf"},{"type":"block","position":{"start":{"line":439,"column":1},"end":{"line":439,"column":1}},"children":[{"type":"heading","depth":3,"position":{"start":{"line":441,"column":1},"end":{"line":441,"column":1}},"children":[{"type":"text","value":"4.1 Check that the data types are ok for sktime","position":{"start":{"line":441,"column":1},"end":{"line":441,"column":1}},"key":"kEx2rgfxxt"}],"identifier":"id-4-1-check-that-the-data-types-are-ok-for-sktime","label":"4.1 Check that the data types are ok for sktime","html_id":"id-4-1-check-that-the-data-types-are-ok-for-sktime","implicit":true,"key":"P3mDWjlLYP"},{"type":"paragraph","position":{"start":{"line":443,"column":1},"end":{"line":443,"column":1}},"children":[{"type":"text","value":"This test needs to pass in order for sktime to run","position":{"start":{"line":443,"column":1},"end":{"line":443,"column":1}},"key":"IiJK9DlABw"}],"key":"k49EFNXXdG"}],"key":"jUT9oJ0r7u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#ask sktime if it likes the data type of X_train\n#if you change any of the functions or cells above this one, it is a good idea to\n# look at the below output to make sure you haven't introduced any NaNs or unequal length series\ncheck_is_mtype(X_train, mtype=\"pd-multiindex\", scitype=\"Panel\", return_metadata=True)","key":"gvMvWiDHXU"},{"type":"output","id":"FRH6FplKn6i5037nkdDf0","data":[{"output_type":"execute_result","execution_count":23,"metadata":{},"data":{"text/plain":{"content":"(True,\n '',\n {'is_univariate': False,\n  'is_empty': False,\n  'has_nans': np.False_,\n  'n_features': 9,\n  'feature_names': ['flux_W1',\n   'flux_W2',\n   'flux_panstarrs_g',\n   'flux_panstarrs_i',\n   'flux_panstarrs_r',\n   'flux_panstarrs_y',\n   'flux_panstarrs_z',\n   'flux_zg',\n   'flux_zr'],\n  'dtypekind_dfip': [<DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>],\n  'feature_kind': [<DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>,\n   <DtypeKind.FLOAT: 2>],\n  'n_instances': 267,\n  'is_one_series': False,\n  'is_equal_length': np.True_,\n  'is_equally_spaced': True,\n  'n_panels': 1,\n  'is_one_panel': True,\n  'mtype': 'pd-multiindex',\n  'scitype': 'Panel'})","content_type":"text/plain"}}}],"key":"bqNB8KlegC"}],"key":"hTJw64pSAW"},{"type":"block","children":[],"key":"Ou4SM7Ek8D"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#show the list of all possible classifiers that work with multivariate data\n#all_tags(estimator_types = 'classifier')\n#classifiers = all_estimators(\"classifier\", filter_tags={'capability:multivariate':True})\n#classifiers","key":"dkCxy5WF66"},{"type":"output","id":"7XbJeCaSkaMQxI0iOSlWV","data":[],"key":"OMmkkvtxAm"}],"key":"zRz5obbtAL"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":459,"column":1},"end":{"line":459,"column":1}},"children":[{"type":"text","value":"4.2 A single Classifier","position":{"start":{"line":459,"column":1},"end":{"line":459,"column":1}},"key":"aYzPynBTvf"}],"identifier":"id-4-2-a-single-classifier","label":"4.2 A single Classifier","html_id":"id-4-2-a-single-classifier","implicit":true,"key":"BU7BGI2Fye"}],"key":"eaKQJwQsk8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n#this cell takes 35s to run on a sample of 267 light curves\n\n#setup the classifier\n#n_jobs is the number of jobs to run in parallel. some environments have trouble with this.\n#if you encounter an error such as 'BrokenProcessPool' while training or predicting, you may\n#want to either set n_jobs = 1 or use a different compute environment.\nclf = Arsenal(time_limit_in_minutes=1, n_jobs = -1)  # '-1' n_jobs means use all processors\n\n#fit the classifier on the training dataset\nclf.fit(X_train, y_train)\n\n#make predictions on the test dataset using the trained model\ny_pred = clf.predict(X_test)\n\nprint(f\"Accuracy of Random Interval Classifier: {accuracy_score(y_test, y_pred)}\\n\", flush=True)\n\n#plot a confusion matrix\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=clf.classes_)\ndisp.plot()\n\nplt.show()","key":"uwJjSKWBBE"},{"type":"output","id":"J4wVpOmz1B5KPXIh3MXtm","data":[{"output_type":"stream","name":"stdout","text":"Accuracy of Random Interval Classifier: 0.7333333333333333\n\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"4e8b512861dd52edec2826aa198db7f3","path":"/fornax-demo-notebooks/build/4e8b512861dd52edec2826aa198db7f3.png"}}},{"output_type":"stream","name":"stdout","text":"CPU times: user 629 ms, sys: 291 ms, total: 920 ms\nWall time: 1min 8s\n"}],"key":"bZG1MmBLta"}],"key":"EmgqfjtJY6"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"children":[{"type":"text","value":"4.3 Loop over a bunch of classifiers","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"key":"fmAiWwMhNo"}],"identifier":"id-4-3-loop-over-a-bunch-of-classifiers","label":"4.3 Loop over a bunch of classifiers","html_id":"id-4-3-loop-over-a-bunch-of-classifiers","implicit":true,"key":"bGl1dMTS8U"},{"type":"paragraph","position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"children":[{"type":"text","value":"Our method is to do a cursory check of a bunch of classifiers and then later drill down deeper on anything with good initial results.  We choose to run a loop over ~10 classifiers that seem promising and check the accuracy scores for each one.  Any classifier with a promising accuracy score could then be followed up with detailed hyperparameter tuning, or potentially with considering other classifiers in that same type.","position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"key":"aiLZ4YM5dy"}],"key":"bHpsoeBxjh"},{"type":"mystDirective","name":"raw-cell","value":"%%time\n#This cell is currently not being run because it takes a long time\n\n#which classifiers are we interestd in\n#roughly one from each type of classifier\n\nnames = [\"Arsenal\",                     #kernel based\n        \"RocektClassifier\",             #kernel based\n        \"CanonicalIntervalForest\",      #interval based\n        \"HIVECOTEV2\",                   #hybrid\n#        \"CNNClassifier\",               #Deep Learning  - **requires tensorflow which is giving import errors\n#        \"WeightedEnsembleClassifier\",   #Ensemble - **maybe use in the future if we find good options\n        \"IndividualTDE\",               #Dictionary-based\n        \"KNeighborsTimeSeriesClassifier\", #Distance Based\n        \"RandomIntervalClassifier\",     #Feature based\n        \"Catch22Classifier\",            #Feature based\n        \"ShapeletTransformClassifier\"   #Shapelet based\n        \"DummyClassifier\"]             #Dummy - ignores input\n\n#for those with an impossible time limit, how long to let them run for before cutting off\nnmins = 3\n\n#these could certainly be more tailored\nclassifier_call = [Arsenal(time_limit_in_minutes=nmins, n_jobs = -1),\n                  RocketClassifier(num_kernels=2000),\n                  CanonicalIntervalForest(n_jobs = -1),\n                  HIVECOTEV2(time_limit_in_minutes=nmins, n_jobs = -1),\n#                  CNNClassifier(),\n#                  WeightedEnsembleClassifier(),\n                  IndividualTDE(n_jobs=-1),\n                  KNeighborsTimeSeriesClassifier(n_jobs = -1),\n                  RandomIntervalClassifier(n_intervals = 20, n_jobs = -1, random_state = 43),\n                  Catch22Classifier(outlier_norm = True, n_jobs = -1, random_state = 43),\n                  ShapeletTransformClassifier(time_limit_in_minutes=nmins,n_jobs = -1),\n                  DummyClassifier()]\n\n#setup to store the accuracy scores\naccscore_dict = {}\n\n# iterate over classifiers\nfor name, clf in tqdm(zip(names, classifier_call)):\n    #fit the classifier\n    clf.fit(X_train, y_train)\n\n    #make predictions on the test dataset\n    y_pred = clf.predict(X_test)\n\n    #calculate and track accuracy score\n    accscore = accuracy_score(y_test, y_pred)\n    print(f\"Accuracy of {name} classifier: {accscore}\\n\", flush=True)\n    accscore_dict[name] = accscore\n\n    #plot confusion matrix\n    cm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=clf.classes_)\n    disp.plot()\n    plt.show()","position":{"start":{"line":491,"column":1},"end":{"line":549,"column":1}},"key":"dncyHAFfKD"}],"key":"b0U8zxxoiK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#show the summary of the algorithms used and their accuracy score\n#accscore_dict","key":"s54g8DilYV"},{"type":"output","id":"fT1NtS9pgGq0VSuFsH9uV","data":[],"key":"g2iAnaAucY"}],"key":"tTsFK11lsx"},{"type":"block","children":[],"key":"abGRkoMmHy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#save statistics from these runs\n\n# Serialize data into file:\n#json.dump( accscore_dict, open( \"output/accscore.json\", 'w' ) )\n#json.dump( completeness_dict, open( \"output/completeness.json\", 'w' ) )\n#json.dump( homogeneity_dict, open( \"output/homogeneity.json\", 'w' ) )\n\n# Read data from file:\n#accscore_dict = json.load( open( \"output/accscore.json\") )","key":"DEbSUfaapa"},{"type":"output","id":"pcy2rvh50auXpucAJuD9z","data":[],"key":"Scw1fwGSrZ"}],"key":"MJQ19kNZfO"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":568,"column":1},"end":{"line":568,"column":1}},"children":[{"type":"text","value":"5. Create a candidate list","position":{"start":{"line":568,"column":1},"end":{"line":568,"column":1}},"key":"ni07L0md1U"}],"identifier":"id-5-create-a-candidate-list","label":"5. Create a candidate list","html_id":"id-5-create-a-candidate-list","implicit":true,"key":"bRTb5IphvV"},{"type":"paragraph","position":{"start":{"line":570,"column":1},"end":{"line":570,"column":1}},"children":[{"type":"text","value":"Lets assume we now have a classifier which can accurately differentiate CLAGN from SDSS QSOs based on their archival light curves.  Next, we would like to use that classifier on our favorite unlabeled sample to identify CLAGN candidates.  To do this, we need to:","position":{"start":{"line":570,"column":1},"end":{"line":570,"column":1}},"key":"ihNZkmblxQ"}],"key":"binkCmhyGP"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":571,"column":1},"end":{"line":576,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":571,"column":1},"end":{"line":571,"column":1}},"children":[{"type":"text","value":"read in a dataframe of our new sample","position":{"start":{"line":571,"column":1},"end":{"line":571,"column":1}},"key":"RW5FNZFsuv"}],"key":"PMn5S6ZWyh"},{"type":"listItem","spread":true,"position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"children":[{"type":"text","value":"get that dataset in the same format as what was fed into the classifiers","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"key":"SfXALil8Xx"}],"key":"TG8nRTt5fB"},{"type":"listItem","spread":true,"position":{"start":{"line":573,"column":1},"end":{"line":573,"column":1}},"children":[{"type":"text","value":"use your trained classifier to predict labels for the new sample","position":{"start":{"line":573,"column":1},"end":{"line":573,"column":1}},"key":"KiNNthIobm"}],"key":"d2PGexuwH8"},{"type":"listItem","spread":true,"position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"children":[{"type":"text","value":"retrace those objectids to an ra & dec","position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"key":"OCWOADfra5"}],"key":"JrwlKWl4A5"},{"type":"listItem","spread":true,"position":{"start":{"line":575,"column":1},"end":{"line":576,"column":1}},"children":[{"type":"text","value":"write an observing proposal (ok, you have to do that one yourself)","position":{"start":{"line":575,"column":1},"end":{"line":575,"column":1}},"key":"BDWZN43UOc"}],"key":"X3Vi6bgAUM"}],"key":"yVIBdkR0Ne"}],"key":"CJxro3UjTo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#read in a dataframe of our new sample:\n# we are going to cheat here and use the same file as we used for input to the above, but you should\n# replace this with your favorite sample run through the light_curve_collector in this same repo.\npath_to_sample = './data/small_CLAGN_SDSS_df_lc.parquet'\nmy_sample = pd.read_parquet(path_to_sample)","key":"xQJMrWUqIO"},{"type":"output","id":"GfvqWWmi7O775D-QtEix8","data":[],"key":"C3syIatayV"}],"key":"WG2Fb5nVt0"},{"type":"block","children":[],"key":"ROyDiFLkvz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#get dataset in same format as what was run through sktime\n#This is not exactly the same as re-running the whole notebook on a different sample,\n#but it is pretty close.  We don't need to do all of the same cleaning because some of that\n#was to appease sktime in training the algorithms.\n\n\n#get rid of indices set in the light curve code and reset them as needed before sktime algorithms\nmy_sample = my_sample.reset_index()\n\n# get rid of some of the bands that don't have enough data for all the sources\n#CLAGN are generall fainter targets, and therefore mostly not found in datasets like TESS & K2\n#make sure your sample has the same bands as were run to train the classifier\nmy_sample = my_sample[~my_sample[\"band\"].isin(bands_to_drop)]\n\n#drop rows which have Nans\nmy_sample.dropna(inplace = True, axis = 0)\n\n#remove outliers\n#make sure your sample has the same sigmaclip_value as was run to train the classifier\nmy_sample = sigmaclip_lightcurves(my_sample, sigmaclip_value, include_plot = False, verbose= False)\n\n#remove objects without W1 fluxes\nmy_sample = remove_objects_without_band(my_sample, 'W1', verbose=False)\n\n#remove incomplete data\n#make sure your sample has the same threshold_too_few as were run to train the classifier\nmy_sample = remove_incomplete_data(my_sample, threshold_too_few, verbose = False)\n\n#drop missing bands\nmy_sample = missingdata_drop_bands(my_sample, bands_to_keep, verbose = False)\n\n#make arrays have uniform length and spacing\n#make sure your sample has the same final_feq_interpol as was run to train the classifier\ndf_interpol = uniform_length_spacing(my_sample, final_freq_interpol, include_plot = False )\nmy_sample = df_interpol.explode([\"time\", \"flux\",\"err\"], ignore_index=True)\nmy_sample = my_sample.astype({col: \"float\" for col in [\"time\", \"flux\", \"err\"]})\n\n#reformat the data to have columns be the different flux bands\nmy_sample = reformat_df(my_sample)\n\n#normalize\nmy_sample = local_normalization_max(my_sample, norm_column = \"flux_W1\")\n\n#make datetime column\nmy_sample['datetime'] = mjd_to_datetime(my_sample)\n\n#set index expected by sktime\nmy_sample = my_sample.set_index([\"objectid\", \"label\", \"datetime\"])\n\n#drop the uncertainty and time columns\nmy_sample.drop(columns = ['err_panstarrs_g',\t'err_panstarrs_i',\t'err_panstarrs_r',\t'err_panstarrs_y',\n                          'err_panstarrs_z',\t'err_W1',\t'err_W2',\t'err_zg',\t'err_zr','time'], inplace = True)\n\n #make X\nX_mysample  = my_sample.droplevel('label')","key":"nqIaNqPSsR"},{"type":"output","id":"Gfk6N-zqELVbvBxkkbHzJ","data":[],"key":"T5xm4dLE7m"}],"key":"X6eZDSj4zR"},{"type":"block","children":[],"key":"PFX09hgY2I"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#what does this look like to make sure we are on track\nX_mysample","key":"an64FaCW40"},{"type":"output","id":"8irxgvZ0P449IsooDUu2w","data":[{"output_type":"execute_result","execution_count":30,"metadata":{},"data":{"text/plain":{"content":"                                      flux_W1   flux_W2  flux_panstarrs_g  \\\nobjectid datetime                                                           \n1        2009-06-03 06:37:08.765742  1.000000  0.927367          0.140308   \n         2009-08-02 06:37:08.765742  1.000000  0.927367          0.140308   \n         2009-10-01 06:37:08.765742  1.000000  0.927367          0.140308   \n         2009-11-30 06:37:08.765742  1.000000  0.927367          0.140308   \n         2010-01-29 06:37:08.765742  1.000000  0.927367          0.140308   \n...                                       ...       ...               ...   \n458      2022-07-25 06:37:08.765742  0.787245  0.568910          0.118627   \n         2022-09-23 06:37:08.765742  0.787245  0.568910          0.118627   \n         2022-11-22 06:37:08.765742  0.787245  0.568910          0.118627   \n         2023-01-21 06:37:08.765742  0.787245  0.568910          0.118627   \n         2023-03-22 06:37:08.765742  0.787245  0.568910          0.118627   \n\n                                     flux_panstarrs_i  flux_panstarrs_r  \\\nobjectid datetime                                                         \n1        2009-06-03 06:37:08.765742          0.331437          0.267991   \n         2009-08-02 06:37:08.765742          0.331437          0.267991   \n         2009-10-01 06:37:08.765742          0.331437          0.267991   \n         2009-11-30 06:37:08.765742          0.331437          0.267991   \n         2010-01-29 06:37:08.765742          0.331437          0.267991   \n...                                               ...               ...   \n458      2022-07-25 06:37:08.765742          0.414211          0.219828   \n         2022-09-23 06:37:08.765742          0.414211          0.219828   \n         2022-11-22 06:37:08.765742          0.414211          0.219828   \n         2023-01-21 06:37:08.765742          0.414211          0.219828   \n         2023-03-22 06:37:08.765742          0.414211          0.219828   \n\n                                     flux_panstarrs_y  flux_panstarrs_z  \\\nobjectid datetime                                                         \n1        2009-06-03 06:37:08.765742          0.461279          0.464892   \n         2009-08-02 06:37:08.765742          0.461279          0.464892   \n         2009-10-01 06:37:08.765742          0.461279          0.464892   \n         2009-11-30 06:37:08.765742          0.461279          0.464892   \n         2010-01-29 06:37:08.765742          0.461279          0.464892   \n...                                               ...               ...   \n458      2022-07-25 06:37:08.765742          0.393996          0.406282   \n         2022-09-23 06:37:08.765742          0.393996          0.406282   \n         2022-11-22 06:37:08.765742          0.393996          0.406282   \n         2023-01-21 06:37:08.765742          0.393996          0.406282   \n         2023-03-22 06:37:08.765742          0.393996          0.406282   \n\n                                      flux_zg   flux_zr  \nobjectid datetime                                        \n1        2009-06-03 06:37:08.765742  0.116756  0.286475  \n         2009-08-02 06:37:08.765742  0.116756  0.286475  \n         2009-10-01 06:37:08.765742  0.116756  0.286475  \n         2009-11-30 06:37:08.765742  0.116756  0.286475  \n         2010-01-29 06:37:08.765742  0.116756  0.286475  \n...                                       ...       ...  \n458      2022-07-25 06:37:08.765742  0.125963  0.283218  \n         2022-09-23 06:37:08.765742  0.125963  0.311635  \n         2022-11-22 06:37:08.765742  0.135551  0.311296  \n         2023-01-21 06:37:08.765742  0.139684  0.305088  \n         2023-03-22 06:37:08.765742  0.127343  0.265804  \n\n[30345 rows x 9 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>flux_W1</th>\n      <th>flux_W2</th>\n      <th>flux_panstarrs_g</th>\n      <th>flux_panstarrs_i</th>\n      <th>flux_panstarrs_r</th>\n      <th>flux_panstarrs_y</th>\n      <th>flux_panstarrs_z</th>\n      <th>flux_zg</th>\n      <th>flux_zr</th>\n    </tr>\n    <tr>\n      <th>objectid</th>\n      <th>datetime</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">1</th>\n      <th>2009-06-03 06:37:08.765742</th>\n      <td>1.000000</td>\n      <td>0.927367</td>\n      <td>0.140308</td>\n      <td>0.331437</td>\n      <td>0.267991</td>\n      <td>0.461279</td>\n      <td>0.464892</td>\n      <td>0.116756</td>\n      <td>0.286475</td>\n    </tr>\n    <tr>\n      <th>2009-08-02 06:37:08.765742</th>\n      <td>1.000000</td>\n      <td>0.927367</td>\n      <td>0.140308</td>\n      <td>0.331437</td>\n      <td>0.267991</td>\n      <td>0.461279</td>\n      <td>0.464892</td>\n      <td>0.116756</td>\n      <td>0.286475</td>\n    </tr>\n    <tr>\n      <th>2009-10-01 06:37:08.765742</th>\n      <td>1.000000</td>\n      <td>0.927367</td>\n      <td>0.140308</td>\n      <td>0.331437</td>\n      <td>0.267991</td>\n      <td>0.461279</td>\n      <td>0.464892</td>\n      <td>0.116756</td>\n      <td>0.286475</td>\n    </tr>\n    <tr>\n      <th>2009-11-30 06:37:08.765742</th>\n      <td>1.000000</td>\n      <td>0.927367</td>\n      <td>0.140308</td>\n      <td>0.331437</td>\n      <td>0.267991</td>\n      <td>0.461279</td>\n      <td>0.464892</td>\n      <td>0.116756</td>\n      <td>0.286475</td>\n    </tr>\n    <tr>\n      <th>2010-01-29 06:37:08.765742</th>\n      <td>1.000000</td>\n      <td>0.927367</td>\n      <td>0.140308</td>\n      <td>0.331437</td>\n      <td>0.267991</td>\n      <td>0.461279</td>\n      <td>0.464892</td>\n      <td>0.116756</td>\n      <td>0.286475</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">458</th>\n      <th>2022-07-25 06:37:08.765742</th>\n      <td>0.787245</td>\n      <td>0.568910</td>\n      <td>0.118627</td>\n      <td>0.414211</td>\n      <td>0.219828</td>\n      <td>0.393996</td>\n      <td>0.406282</td>\n      <td>0.125963</td>\n      <td>0.283218</td>\n    </tr>\n    <tr>\n      <th>2022-09-23 06:37:08.765742</th>\n      <td>0.787245</td>\n      <td>0.568910</td>\n      <td>0.118627</td>\n      <td>0.414211</td>\n      <td>0.219828</td>\n      <td>0.393996</td>\n      <td>0.406282</td>\n      <td>0.125963</td>\n      <td>0.311635</td>\n    </tr>\n    <tr>\n      <th>2022-11-22 06:37:08.765742</th>\n      <td>0.787245</td>\n      <td>0.568910</td>\n      <td>0.118627</td>\n      <td>0.414211</td>\n      <td>0.219828</td>\n      <td>0.393996</td>\n      <td>0.406282</td>\n      <td>0.135551</td>\n      <td>0.311296</td>\n    </tr>\n    <tr>\n      <th>2023-01-21 06:37:08.765742</th>\n      <td>0.787245</td>\n      <td>0.568910</td>\n      <td>0.118627</td>\n      <td>0.414211</td>\n      <td>0.219828</td>\n      <td>0.393996</td>\n      <td>0.406282</td>\n      <td>0.139684</td>\n      <td>0.305088</td>\n    </tr>\n    <tr>\n      <th>2023-03-22 06:37:08.765742</th>\n      <td>0.787245</td>\n      <td>0.568910</td>\n      <td>0.118627</td>\n      <td>0.414211</td>\n      <td>0.219828</td>\n      <td>0.393996</td>\n      <td>0.406282</td>\n      <td>0.127343</td>\n      <td>0.265804</td>\n    </tr>\n  </tbody>\n</table>\n<p>30345 rows × 9 columns</p>\n</div>","content_type":"text/html"}}}],"key":"J3ympg5x3a"}],"key":"FGq5hSz7XV"},{"type":"block","children":[],"key":"Dielz8OxEw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#use the trained sktime algorithm to make predictions on the test dataset\ny_mysample = clf.predict(X_mysample)","key":"yLclXsJK1G"},{"type":"output","id":"DwTNAZOv9MYwPlAjODr7w","data":[],"key":"vhw4lKyD8J"}],"key":"GOCzm0i1Wy"},{"type":"block","children":[],"key":"VHEDKrS0kE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#access the sample_table made in the light_curve_collector notebook\n#has information about the sample including ra & dec\nsavename_sample = './data/small_CLAGN_SDSS_sample.ecsv'\ngdd.download_file_from_google_drive(file_id='1pSEKVP4LbrdWQK9ws3CaI90m3Z_2fazL',\n                                    dest_path=savename_sample,\n                                    unzip=True)\nsample_table = Table.read(savename_sample, format='ascii.ecsv')","key":"MtBUNGEHsw"},{"type":"output","id":"qhOIdwAFxwhga30iHEt0-","data":[{"output_type":"stream","name":"stdout","text":"Downloading 1pSEKVP4LbrdWQK9ws3CaI90m3Z_2fazL into ./data/small_CLAGN_SDSS_sample.ecsv... "},{"output_type":"stream","name":"stdout","text":"Done.\nUnzipping..."},{"output_type":"stream","name":"stderr","text":"/home/runner/work/fornax-demo-notebooks/fornax-demo-notebooks/.tox/py312-buildhtml/lib/python3.12/site-packages/googledrivedownloader/download.py:88: UserWarning: Ignoring `unzip` since \"1pSEKVP4LbrdWQK9ws3CaI90m3Z_2fazL\" does not look like a valid zip file\n  warnings.warn('Ignoring `unzip` since \"{}\" does not look like a valid zip file'.format(file_id))\n"}],"key":"GZl3I6PRdZ"}],"key":"geMpOGWJ7s"},{"type":"block","children":[],"key":"E5Umfv5h4n"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#associate these predicted CLAGN with RA & Dec\n\n#need to first associate objectid with each of y_mysample\n#make a new df with a column = objectid which\n#includes all the unique objectids.\ntest = X_mysample.reset_index()\nmysample_CLAGN = pd.DataFrame(test.objectid.unique(), columns = ['objectid'])\nmysample_CLAGN[\"predicted_label\"] = pd.Series(y_mysample)\n\n#if I am only interested in the CLAGN, could drop anything with label = SDSS\nquerystring = 'predicted_label == \"SDSS\"'\nmysample_CLAGN = mysample_CLAGN.drop(mysample_CLAGN.query(querystring ).index)\n\n#then will need to merge candidate_CLAGN with sample_table along objectid\nsample_table_df = sample_table.to_pandas()\ncandidate_CLAGN = pd.merge(mysample_CLAGN, sample_table_df, on = \"objectid\", how = \"inner\")","key":"C7QLtEUq72"},{"type":"output","id":"rzFzapeP2Ajc6-MyEd7_o","data":[],"key":"d4Pa1MwWk5"}],"key":"wXHPqdsGIg"},{"type":"block","children":[],"key":"k2OPNezeyX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#show the CLAGN candidates ra & dec\ncandidate_CLAGN","key":"ZIOYRl4bPb"},{"type":"output","id":"iaSIiYlz0GdUYa_My6XfY","data":[{"output_type":"execute_result","execution_count":34,"metadata":{},"data":{"text/plain":{"content":"     objectid predicted_label    coord.ra  coord.dec       label\n0           1           CLAGN   29.990000   0.553010  LaMassa 15\n1           2           CLAGN    5.796083   0.588203    Green 22\n2           3           CLAGN   36.483625   0.507417  MacLeod 16\n3           5           CLAGN  150.584042  45.157583  MacLeod 16\n4           6           CLAGN  155.468083  46.754333  MacLeod 16\n..        ...             ...         ...        ...         ...\n96        204           CLAGN  171.400690  54.382555        SDSS\n97        282           CLAGN  161.163170  38.759552        SDSS\n98        314           CLAGN  259.412720  32.704313        SDSS\n99        380           CLAGN  188.156210  66.414533        SDSS\n100       415           CLAGN  200.730970   8.161559        SDSS\n\n[101 rows x 5 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>objectid</th>\n      <th>predicted_label</th>\n      <th>coord.ra</th>\n      <th>coord.dec</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>CLAGN</td>\n      <td>29.990000</td>\n      <td>0.553010</td>\n      <td>LaMassa 15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>CLAGN</td>\n      <td>5.796083</td>\n      <td>0.588203</td>\n      <td>Green 22</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>CLAGN</td>\n      <td>36.483625</td>\n      <td>0.507417</td>\n      <td>MacLeod 16</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>CLAGN</td>\n      <td>150.584042</td>\n      <td>45.157583</td>\n      <td>MacLeod 16</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>CLAGN</td>\n      <td>155.468083</td>\n      <td>46.754333</td>\n      <td>MacLeod 16</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>204</td>\n      <td>CLAGN</td>\n      <td>171.400690</td>\n      <td>54.382555</td>\n      <td>SDSS</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>282</td>\n      <td>CLAGN</td>\n      <td>161.163170</td>\n      <td>38.759552</td>\n      <td>SDSS</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>314</td>\n      <td>CLAGN</td>\n      <td>259.412720</td>\n      <td>32.704313</td>\n      <td>SDSS</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>380</td>\n      <td>CLAGN</td>\n      <td>188.156210</td>\n      <td>66.414533</td>\n      <td>SDSS</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>415</td>\n      <td>CLAGN</td>\n      <td>200.730970</td>\n      <td>8.161559</td>\n      <td>SDSS</td>\n    </tr>\n  </tbody>\n</table>\n<p>101 rows × 5 columns</p>\n</div>","content_type":"text/html"}}}],"key":"zxp5AkBkz7"}],"key":"Aiv3yc14qW"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":687,"column":1},"end":{"line":687,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":687,"column":1},"end":{"line":687,"column":1}},"key":"ITwoT03qLn"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"nQLiAk5cvq"},{"type":"paragraph","position":{"start":{"line":689,"column":1},"end":{"line":689,"column":1}},"children":[{"type":"text","value":"Depending on your comfort level with the accuracy of the classifier you have trained, you could now write an observing proposal to confirm those targets prediced to be CLAGN based on their multiwavelength light curves.","position":{"start":{"line":689,"column":1},"end":{"line":689,"column":1}},"key":"Q8HKEZqsNQ"}],"key":"PfR9fwhtB2"}],"key":"ayBRntgEZP"},{"type":"block","position":{"start":{"line":691,"column":1},"end":{"line":691,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":693,"column":1},"end":{"line":693,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":693,"column":1},"end":{"line":693,"column":1}},"key":"WsSORRWvIh"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"NiavNnifva"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":695,"column":1},"end":{"line":697,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"children":[{"type":"strong","position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"children":[{"type":"text","value":"Authors:","position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"key":"opVfRrTaLs"}],"key":"egZ3XGXcDI"},{"type":"text","value":" Jessica Krick, Shoubaneh Hemmati, Troy Raen, Brigitta Sipőcz, Andreas Faisst, Vandana Desai, David Shupe, and the Fornax team","position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"key":"T25MEdjMVQ"}],"key":"ZA8KVBKQtY"},{"type":"listItem","spread":true,"position":{"start":{"line":696,"column":1},"end":{"line":697,"column":1}},"children":[{"type":"strong","position":{"start":{"line":696,"column":1},"end":{"line":696,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":696,"column":1},"end":{"line":696,"column":1}},"key":"gfyqjmFqCV"}],"key":"FNm3cmNFor"},{"type":"text","value":" For help with this notebook, please open a topic in the ","position":{"start":{"line":696,"column":1},"end":{"line":696,"column":1}},"key":"hIlWTxD1V0"},{"type":"link","url":"https://discourse.fornax.sciencecloud.nasa.gov/","position":{"start":{"line":696,"column":1},"end":{"line":696,"column":1}},"children":[{"type":"text","value":"Fornax Community Forum","position":{"start":{"line":696,"column":1},"end":{"line":696,"column":1}},"key":"nZcxd27Sca"}],"urlSource":"https://discourse.fornax.sciencecloud.nasa.gov/","key":"KY5FPu5hj9"},{"type":"text","value":" “Support” category.","position":{"start":{"line":696,"column":1},"end":{"line":696,"column":1}},"key":"dGD3fn2I3e"}],"key":"iiXXxrNjqR"}],"key":"S5wI10sb9o"},{"type":"heading","depth":3,"position":{"start":{"line":698,"column":1},"end":{"line":698,"column":1}},"children":[{"type":"text","value":"Acknowledgements","position":{"start":{"line":698,"column":1},"end":{"line":698,"column":1}},"key":"fDTHy2Yejv"}],"identifier":"acknowledgements","label":"Acknowledgements","html_id":"acknowledgements","implicit":true,"key":"a0nM4VLM9u"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":700,"column":1},"end":{"line":701,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":700,"column":1},"end":{"line":701,"column":1}},"children":[{"type":"text","value":"Stephanie La Massa","position":{"start":{"line":700,"column":1},"end":{"line":700,"column":1}},"key":"IaYGHxIkvC"}],"key":"hkAp8OkjEg"}],"key":"lzEuq5Ptzu"},{"type":"heading","depth":3,"position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"children":[{"type":"text","value":"References","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"key":"yl6GbFQPYv"}],"identifier":"references","label":"References","html_id":"references","implicit":true,"key":"zUpgySJkfv"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":704,"column":1},"end":{"line":708,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":704,"column":1},"end":{"line":705,"column":1}},"children":[{"type":"text","value":"“sktime: A Unified Interface for Machine Learning with Time Series”\nMarkus Löning, Tony Bagnall, Sajaysurya Ganesh, George Oastler, Jason Lines, ViktorKaz, …, Aadesh Deshmukh (2020). sktime/sktime. Zenodo. ","position":{"start":{"line":704,"column":1},"end":{"line":704,"column":1}},"key":"tyD6Pwjf9D"},{"type":"cite","url":"http://doi.org/10.5281/zenodo.3749000","position":{"start":{"line":704,"column":1},"end":{"line":704,"column":1}},"children":[{"type":"text","value":"Franz Király ","key":"jfxohWZpHq"},{"type":"emphasis","children":[{"type":"text","value":"et al.","key":"UX0cG4M9cc"}],"key":"WBIT66iKon"},{"type":"text","value":" (2025)","key":"ZmBKUrUf71"}],"kind":"narrative","label":"https://doi.org/10.5281/zenodo.3749000","identifier":"http://doi.org/10.5281/zenodo.3749000","enumerator":"1","key":"ldJkmwPNGn"}],"key":"LxYvr1lveF"},{"type":"listItem","spread":true,"position":{"start":{"line":706,"column":1},"end":{"line":706,"column":1}},"children":[{"type":"text","value":"“Scikit-learn: Machine Learning in Python”, Pedregosa et al., JMLR 12, pp. 2825-2830, 2011.","position":{"start":{"line":706,"column":1},"end":{"line":706,"column":1}},"key":"aQHLG743WZ"}],"key":"QyRhOrPUk6"},{"type":"listItem","spread":true,"position":{"start":{"line":707,"column":1},"end":{"line":707,"column":1}},"children":[{"type":"text","value":"“pandas-dev/pandas: Pandas” The pandas development team, 2020. Zenodo. ","position":{"start":{"line":707,"column":1},"end":{"line":707,"column":1}},"key":"brBbBIDP1A"},{"type":"cite","url":"https://doi.org/10.5281/zenodo.3509134","position":{"start":{"line":707,"column":1},"end":{"line":707,"column":1}},"children":[{"type":"text","value":"team (2025)","key":"YUWvHUW6dN"}],"kind":"narrative","label":"https://doi.org/10.5281/zenodo.3509134","identifier":"https://doi.org/10.5281/zenodo.3509134","enumerator":"2","key":"PrZ3uDK4IL"}],"key":"FBZxai7PqY"},{"type":"listItem","spread":true,"position":{"start":{"line":708,"column":1},"end":{"line":708,"column":1}},"children":[{"type":"text","value":"This work made use of ","position":{"start":{"line":708,"column":1},"end":{"line":708,"column":1}},"key":"xkTUgI5ZZI"},{"type":"link","url":"http://www.astropy.org","position":{"start":{"line":708,"column":1},"end":{"line":708,"column":1}},"children":[{"type":"text","value":"Astropy","position":{"start":{"line":708,"column":1},"end":{"line":708,"column":1}},"key":"heqeO69LAk"}],"urlSource":"http://www.astropy.org","key":"iypTAXSkop"},{"type":"text","value":" a community-developed core Python package and an ecosystem of tools and resources for astronomy (astropy:2013, astropy:2018, astropy:2022).","position":{"start":{"line":708,"column":1},"end":{"line":708,"column":1}},"key":"NSdnIT5GOt"}],"key":"A0zjjdLGpI"}],"key":"JiGWP3Gkaq"}],"key":"oDHsVYxQF2"}],"key":"k4BdwlAnMx"},"references":{"cite":{"order":["https://doi.org/10.5281/zenodo.3749000","https://doi.org/10.5281/zenodo.3509134"],"data":{"https://doi.org/10.5281/zenodo.3749000":{"label":"https://doi.org/10.5281/zenodo.3749000","enumerator":"1","doi":"10.5281/ZENODO.3749000","html":"Franz Király, Markus Löning, Tony Bagnall, Matthew Middlehurst, Anirban Ray, Sajaysurya Ganesh, Martin Walter, George Oastler, Jason Lines, ViktorKaz, Benedikt Heidrich, Lukasz Mentel, Sagar Mishra, Jigyasu Krishnan, chrisholder, Daniel Bartling, Armaghan Shakir, Leonidas Tsaprounis, RNKuhns, … ericjb. (2025). <i>sktime/sktime: v0.39.0</i>. Zenodo. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.5281/ZENODO.3749000\">10.5281/ZENODO.3749000</a>","url":"https://doi.org/10.5281/ZENODO.3749000"},"https://doi.org/10.5281/zenodo.3509134":{"label":"https://doi.org/10.5281/zenodo.3509134","enumerator":"2","doi":"10.5281/ZENODO.3509134","html":"The pandas development team. (2025). <i>pandas-dev/pandas: Pandas</i>. Zenodo. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.5281/ZENODO.3509134\">10.5281/ZENODO.3509134</a>","url":"https://doi.org/10.5281/ZENODO.3509134"}}}},"footer":{"navigation":{"prev":{"title":"Make Multi-Wavelength Light Curves for Large Samples","url":"/scale-up","group":"The Fornax Initiative"},"next":{"title":"AGN Zoo: Comparison of AGN selected with different metrics","url":"/ml-agnzoo","group":"The Fornax Initiative"}}},"domain":"http://localhost:3000"}